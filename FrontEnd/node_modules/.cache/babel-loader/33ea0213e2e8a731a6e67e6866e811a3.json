{"ast":null,"code":"var _jsxFileName = \"/Users/rida_massou/Desktop/Projet_IA/FrontEnd/src/CanvasContext.js\";\nimport React, { useContext, useRef, useState } from \"react\";\nconst CanvasContext = React.createContext();\nexport const CanvasProvider = ({\n  children\n}) => {\n  const [isDrawing, setIsDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  const prepareCanvas = () => {\n    const canvas = canvasRef.current;\n    /*canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;*/\n\n    canvas.style.width = `200px`;\n    canvas.style.height = `200px`;\n    canvas.width = \"200px\";\n    canvas.height = \"200px\";\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 30;\n    contextRef.current = context;\n  };\n\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return /*#__PURE__*/React.createElement(CanvasContext.Provider, {\n    value: {\n      canvasRef,\n      contextRef,\n      prepareCanvas,\n      startDrawing,\n      finishDrawing,\n      clearCanvas,\n      draw\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useCanvas = () => useContext(CanvasContext);","map":{"version":3,"sources":["/Users/rida_massou/Desktop/Projet_IA/FrontEnd/src/CanvasContext.js"],"names":["React","useContext","useRef","useState","CanvasContext","createContext","CanvasProvider","children","isDrawing","setIsDrawing","canvasRef","contextRef","prepareCanvas","canvas","current","style","width","height","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","lineTo","stroke","clearCanvas","fillStyle","fillRect","useCanvas"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useState } from \"react\";\n\nconst CanvasContext = React.createContext();\n\nexport const CanvasProvider = ({ children }) => {\n  const [isDrawing, setIsDrawing] = useState(false)\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  const prepareCanvas = () => {\n    const canvas = canvasRef.current\n    /*canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;*/\n    canvas.style.width = `200px`;\n    canvas.style.height = `200px`;\n    canvas.width = \"200px\";\n    canvas.height = \"200px\";\n\n    const context = canvas.getContext(\"2d\")\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 30;\n    contextRef.current = context;\n  };\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\")\n    context.fillStyle = \"white\"\n    context.fillRect(0, 0, canvas.width, canvas.height)\n  }\n\n  return (\n    <CanvasContext.Provider\n      value={{\n        canvasRef,\n        contextRef,\n        prepareCanvas,\n        startDrawing,\n        finishDrawing,\n        clearCanvas,\n        draw,\n      }}\n    >\n      {children}\n    </CanvasContext.Provider>\n  );\n};\n\nexport const useCanvas = () => useContext(CanvasContext);\n"]},"metadata":{},"sourceType":"module"}